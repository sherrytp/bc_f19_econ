getwd()
library(tidyverse)
library(cowplot)
library(sandwich)
library(lmtest)
df <- read_csv("bc_f19_econ/be_bc_f19/R/R-hw/ps1/sutterexperiment.csv")
getwd
getwd()
df <- read_csv("sutterexperiment.csv")
old.names <- colnames(df)
new.names <- tolower(old.names)
set_names(df, old.names, new.names)
colnames(df) <- new.names
rm(new.names, old.names)
View(df)
View(df)
library(tidyverse)
library(cowplot)
library(sandwich)
library(lmtest)
sessionInfo()
installed.packages()
sessionInfo()
installed.packages()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
rm(list = ls()) # Clear environment
gc()            # Clear unused memory
cat("\f")       # Clear the console
library(ggplot2)
library(fpp2)
?gold
?woolyrnq
?gas
autoplot(gold)
autoplot(woolyrnq)
autoplot(gas)
frequency(gold)
frequency(woolyrnq)
frequency(gas)
which.max(gold)
which.max(woolyrnq)
which.max(gas)
library(fpp2)
library(fpp2)
res <- residuals(naive(goog200))
mean(res)
res
plot(res)
mean(as.numeric(res))
sum(res)
summary(res)
mean(res, na.rm = TRUE)
dist(res)
gghistogram(res, add.normal = TRUE)
gghistogram(res)
library(fpp2)
beer <- window(ausbeer, start = 1992)
fc <- snaive(beer)
autoplot(fc)
checkresiduals(fc)
beer <- window(ausbeer, start = 1992)
fc <- snaive(beer)
mbeer <- fc$mean
autoplot(mbeer)
fc <- snaive(beer)
autoplot(fc)
checkresiduals(fc)
# mbeer <- fc$mean
# autoplot(mbeer)
# NOTE: 1. mean is around 0
summary(residuals(fc))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # Clear environment
gc()            # Clear unused memory
cat("\f")       # Clear the console
library(ggplot2)
library(fpp2)
?gold
?woolyrnq
?gas
autoplot(gold)
autoplot(woolyrnq)
autoplot(gas)
autoplot(gas)
# b.
frequency(gold)
frequency(woolyrnq)
frequency(gas)
# c.
which.max(gold)
# a.
autoplot(gold)
which.max(gas)
# c.
which.max(gold)
# a.
tute1 <- read.csv("/Users/apple/Downloads/tute1.csv", header = TRUE)
# b.
mytimeseries <- ts(tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters.
# c.
autoplot(mytimeseries, facets = TRUE)
# Alternatively,
autoplot(mytimeseries)
# The [,-1] removes the first column which contains the quarters.
# c.
autoplot(mytimeseries, facets = TRUE)
# Alternatively,
autoplot(mytimeseries)
View(mytimeseries)
# a.
retaildata <- readxl::read_excel("/Users/apple/Downloads/retail.xlsx", skip = 1)
# skip=1 is required because the Excel sheet has two header rows
samplets <- ts(retaildata[, "A3349873A"],
frequency = 12, start = c(1982, 4))
# b.
myts <- ts(retaildata[, "A3349588R"],
frequency = 12, start = c(1982, 4))
# c.
autoplot(myts)
ggseasonplot(myts)
ggsubseriesplot(myts)   # might be the best
gglagplot(myts)
ggAcf(myts)
ggsubseriesplot(myts)   # might be the best
ggsubseriesplot(myts)   # might be the best
ggseasonplot(myts)
# c.
autoplot(myts)
ggsubseriesplot(myts)   # might be the best
# c.
autoplot(myts)
ggsubseriesplot(myts)   # might be the best
View(retaildata)
# ?????? time plots of following time series?
help(bicoal)
# Annual bituminous coal production in the USA: 1920–1968.
autoplot(bicoal)
help(chicken)
# Price of chicken in US (constant dollars): 1924–1993.
autoplot(chicken)
help(dole)
# Monthly total of people on unemployment benefits in Australia (Jan 1965 – Jul 1992).
autoplot(dole)
help(usdealths)
help(usdealths)
help(usdeaths)
# Monthly accidental deaths in USA.
autoplot(usdeaths)
help(lynx)
# Annual Canadian Lynx trappings 1821-1934.
autoplot(lynx)
help("goog")
autoplot(goog) + ylab("Stock Price in Dollars $") + ggtitle("Google Stock")
help(writing)
# Industry sales for printing and writing paper (in thousands of French francs): Jan 1963 – Dec 1972.
autoplot(writing)
help(fancy)
# Monthly sales for a souvenir shop on the wharf at a beach resort town in Queensland, Australia.
autoplot(fancy)
help(a10)
autoplot(h02)
ggseasonplot(writing)
ggsubseriesplot(writing)
ggseasonplot(writing)
getwd()
ggseasonplot(fancy)
ggseasonplot(fancy)
ggsubseriesplot(fancy)
ggseasonplot(fancy)
ggseasonplot(a10)
ggseasonplot(h02)
ggsubseriesplot(a10)
ggseasonplot(h02)
ggsubseriesplot(h02)
ggseasonplot(h02)
autoplot(hsales)
autoplot(hsales)
ggseasonplot(hsales)
ggsubseriesplot(hsales)
gglagplot(hsales)
autoplot(usdeaths)
ggseasonplot(usdeaths)
ggseasonplot(usdeaths)
autoplot(sunspotarea)
ggseasonplot(sunspotarea)
ggseasonplot(sunspotarea)
ggsubseriesplot(sunspotarea)
gglagplot(sunspotarea)
ggAcf(sunspotarea)
autoplot(sunspotarea)
autoplot(sunspotarea)
gglagplot(sunspotarea)
autoplot(gasoline)
ggsubseriesplot(gasoline)
ggseasonplot(gasoline)
ggsubseriesplot(gasoline)
gglagplot(gasoline)
ggseasonplot(gasoline)
autoplot(gasoline)
autoplot(arrivals)
ggseasonplot(arrivals)
ggsubseriesplot(arrivals)
arrivals
autoplot(arrivals)
ggseasonplot(arrivals)
ggseasonplot(writing)
ggseasonplot(arrivals$Japan)
arrivals$Japan
arrivals
ggseasonplot(sunspotarea)
#ggseasonplot(sunspotarea)
ggsubseriesplot(sunspotarea)
#ggseasonplot(sunspotarea)
#ggsubseriesplot(sunspotarea)
gglagplot(sunspotarea)
#ggsubseriesplot(gasoline)
gglagplot(gasoline)
autoplot(arrivals)
sessionInfo()
sessionInfo()
alpha = 0.8
curve(x^alpha, from = 0, to = 10)
alpha = 0.3
curve(x^alpha, from = 0, to = 10)
curve((-x)^alpha, from = 0, to = 10)
alpha = 0.3
curve((-x)^alpha, from = 0, to = 10)
u = ifelse(x>=r, x^alpha, -lambda*(-x)^beta)
rd_utility <- function(x,r=0,alpha=1, beta=1, lambda=2.25){
u = ifelse(x>=r, x^alpha, -lambda*(-x)^beta)
return(u)
}
# visualize
curve(rd_utility, from=-10, to=10,lwd=2, main="Linear (alpha=beta=1)")
abline(h=0,col="red")
# derivative: marginal utility
marginal_rd_utility <- function(x,r=0,alpha=1, beta=1, lambda=2.25){
mu = ifelse(x>=r, alpha*x^(alpha-1), (beta*-lambda)*(-x)^(beta-1))
return(mu)
}
# check: u(x) < -u(-x)
rd_utility(1)
abs(rd_utility(-1))
# check: u'(x)_x>r < u'(x)_x<r
marginal_rd_utility(2)
abs(marginal_rd_utility(-2))
## same as:
get_derivative(rd_utility, 2)
# or: approximate derivative of function f(x) using central differences
## f'(x) = [f(x+h) - f(x-h)]/2h (ignoring the truncation error)
## as h -> 0 the numerical approximation improves
get_derivative <- function(f, x, h=0.0000000001) {
dx <- (f(x + h) - f(x - h)) / (2*h)
return(dx)
}
# sanity check: f(x) = 3x^2 ==> f'(x) = 6x, so f'(2) = 12
get_derivative(f=function(x) 3*x^2, x=2)
# Alternatively same; f <- function(x) return(3*x^2)
# sanity check: f(x) = 3x^2 ==> f'(x) = 6x, so f'(2) = 12
get_derivative(f=function(x) 3*x^2, x=2)
u = ifelse(w*h >= r, w*h-r, lambda(w*h-r))
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 1) {
u = ifelse(w*h >= r, w*h-r, lambda(w*h-r))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 1) {
u = ifelse(w*h >= r, w*h-r, lambda(w*h-r))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda=1) {
u = ifelse(w*h >= r, w*h-r, lambda(w*h-r))
return(u)
}
curve(utility, from = 0, to = 20)
u = ifelse(w*h >= r, w*h-r - (theta*h^2/2), lambda*(w*h-r) - (theta*h^2/2))
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 1, theta = 1) {
u = ifelse(w*h >= r, w*h-r - (theta*h^2/2), lambda*(w*h-r) - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 2, theta = 1) {
u = ifelse(w*h >= r, w*h-r - (theta*h^2/2), lambda*(w*h-r) - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 3, theta = 1) {
u = ifelse(w*h >= r, w*h-r - (theta*h^2/2), lambda*(w*h-r) - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 2, theta = 1) {
u = ifelse(w*h >= r, w*h-r - (theta*h^2/2), lambda*(w*h-r) - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 2, theta = 1) {
u = ifelse(w*h >= r,
w*h-r - (theta*h^2/2),
lambda*(w*h) - r - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
abline(h=0,col="green")
abline(h=min(h),col="green")
abline(h=which.min(h),col="green")
abline(h=0,col="green")
# labor supply
utility <- function(h, r = 100, w = 20, lambda = 2, theta = 1) {
u = ifelse(w*h >= r,
w*h-r - (theta*h^2/2),
lambda*(w*h - r) - (theta*h^2/2))
return(u)
}
curve(utility, from = 0, to = 20)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # Clear environment
gc()            # Clear unused memory
library(tidyverse)
library(tidyverse)
library(cowplot)
library(sandwich)
library(lmtest)
df <- read_csv("sutterexperiment.csv")
old.names <- colnames(df)
new.names <- tolower(old.names)
colnames(df) <- new.names
rm(new.names, old.names)
View(df)
long <- read_csv("sutterexperiment_long.csv")
long <- read_csv(file.choose())
View(long)
View(df)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # Clear environment
gc()            # Clear unused memory
cat("\f")       # Clear the console
library(ggplot2)
library(fpp2)
summary(cars)
?gold
?woolyrnq
?gas
# a.
autoplot(gold)
autoplot(woolyrnq)
autoplot(gas)
# b.
frequency(gold)
frequency(woolyrnq)
frequency(gas)
# c.
which.max(gold)   # 770 is the highest outlier in the plot.
which.max(woolyrnq)
which.max(gas)
# a.
tute1 <- read.csv("/Users/apple/Downloads/tute1.csv", header = TRUE)
# b.
mytimeseries <- ts(tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters.
# c.
autoplot(mytimeseries, facets = TRUE)
# Alternatively,
autoplot(mytimeseries)
# a.
retaildata <- readxl::read_excel("/Users/apple/Downloads/retail.xlsx", skip = 1)
# skip=1 is required because the Excel sheet has two header rows
samplets <- ts(retaildata[, "A3349873A"],
frequency = 12, start = c(1982, 4))
# b.
myts <- ts(retaildata[, "A3349588R"],
frequency = 12, start = c(1982, 4))
# c.
autoplot(myts)
ggseasonplot(myts)
ggsubseriesplot(myts)   # might be the best
gglagplot(myts)
ggAcf(myts)
# ?????? time plots of following time series?
help(bicoal)
# Annual bituminous coal production in the USA: 1920–1968.
autoplot(bicoal)
help(chicken)
# Price of chicken in US (constant dollars): 1924–1993.
autoplot(chicken)
help(dole)
# Monthly total of people on unemployment benefits in Australia (Jan 1965 – Jul 1992).
autoplot(dole)
help(usdeaths)
# Monthly accidental deaths in USA.
autoplot(usdeaths)
help(lynx)
# Annual Canadian Lynx trappings 1821-1934.
autoplot(lynx)
help("goog")
# Closing stock prices of GOOG from the NASDAQ exchange, for 1000 consecutive trading days between 25 February 2013 and 13 February 2017. Adjusted for splits. goog200 contains the first 200 observations from goog.
autoplot(goog) + ylab("Stock Price in Dollars $") + ggtitle("Google Stock")
help(writing)
# Industry sales for printing and writing paper (in thousands of French francs): Jan 1963 – Dec 1972.
autoplot(writing)
help(fancy)
# Monthly sales for a souvenir shop on the wharf at a beach resort town in Queensland, Australia.
autoplot(fancy)
help(a10)
# Monthly anti-diabetic drug sales in Australia from 1991 to 2008.
# Total monthly scripts for pharmaceutical products falling under ATC code A10, as recorded by the Australian Health Insurance Commission. July 1991 - June 2008.
autoplot(h02)
ggseasonplot(writing)
ggseasonplot(fancy)
ggseasonplot(a10)
ggseasonplot(h02)
ggsubseriesplot(writing)
ggsubseriesplot(fancy)
ggsubseriesplot(a10)
ggsubseriesplot(h02)
autoplot(hsales)
ggseasonplot(hsales)
ggsubseriesplot(hsales)
gglagplot(hsales)
ggAcf(hsales)
# US Sales, cyclical where the trend shown not fit to a certain period every year.
# Some repetition of seasonality around.
autoplot(usdeaths)
ggseasonplot(usdeaths)
ggsubseriesplot(usdeaths)
gglagplot(usdeaths)
ggAcf(usdeaths)
# Seasonality with a peak in July.
autoplot(bricksq)
ggseasonplot(bricksq)
ggsubseriesplot(bricksq)
gglagplot(bricksq)
ggAcf(bricksq)
# Trend of growth overall; seasonality before 1975s every year; cyclical pattern similar to business cycles not in fixed time periods.
autoplot(sunspotarea)
#ggseasonplot(sunspotarea)
#ggsubseriesplot(sunspotarea)
gglagplot(sunspotarea)
ggAcf(sunspotarea)
# There is no strong seasonality (very interesting that the system code tells me there isn't); however, there might be a cyclinal pattern with three periods.
autoplot(gasoline)
ggseasonplot(gasoline)
#ggsubseriesplot(gasoline)
gglagplot(gasoline)
ggAcf(gasoline)
# There is no show of seasonality or cyclicity but there is a growth trend from 1990 to 2005, and then the gasoline amounts flutate roughly around a level.
autoplot(arrivals)
#ggseasonplot(arrivals)
#ggsubseriesplot(arrivals)
